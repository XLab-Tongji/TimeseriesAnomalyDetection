import tensorflow as tf

SEQ_LEN = 188
ENC_DIM = 256


def encoder(name="encoder"):
    input = tf.keras.layers.Input(shape=(SEQ_LEN,SEQ_LEN,3))

    x = tf.keras.layers.Conv2D(4,(3,3),strides=(2,2),padding="same")(input)
    x = tf.keras.layers.LeakyReLU()(x)

    x = tf.keras.layers.Conv2D(8,(3,3),strides=(2,2),padding="same")(x)
    x = tf.keras.layers.LeakyReLU()(x)

    x = tf.keras.layers.Conv2D(16,(3,3),strides=(2,2),padding="same")(x)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.LeakyReLU()(x)

    x = tf.keras.layers.Conv2D(32,(3,3),strides=(2,2),padding="same")(x)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.LeakyReLU()(x)

    x = tf.keras.layers.Conv2D(64,(3,3),strides=(2,2),padding="same")(x)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.LeakyReLU()(x)

    x = tf.keras.layers.Conv2D(128,(3,3),strides=(2,2),padding="same")(x)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.LeakyReLU()(x)

    x = tf.keras.layers.Conv2D(256,(3,3),padding="valid")(x)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.LeakyReLU()(x)

    x = tf.keras.layers.Flatten()(x)

    return tf.keras.Model(inputs=input,outputs=x,name=name)

def decoder(name="decoder"):
    input = tf.keras.layers.Input(shape=(256))
    x = tf.keras.layers.Reshape((1,1,256))(input)

    x = tf.keras.layers.Conv2DTranspose(128,(3,3),padding="valid",activation="relu")(x)             
    x = tf.keras.layers.Conv2DTranspose(64,(3,3),strides=(2,2),padding="same",activation="relu")(x) 
    x = tf.keras.layers.Conv2DTranspose(32,(3,3),strides=(2,2),padding="same",activation="relu")(x) 
    x = tf.keras.layers.Conv2DTranspose(16,(3,3),strides=(2,2),padding="same",activation="relu")(x) 
    x = tf.keras.layers.Conv2DTranspose(64,(3,3),strides=(2,2),padding="valid",activation="relu")(x)
    x = tf.keras.layers.Conv2D(64,(3,3),padding='valid',activation="relu")(x)
    x = tf.keras.layers.Conv2DTranspose(16,(3,3),strides=(2,2),padding="same",activation="linear")(x)
    x = tf.keras.layers.Conv2DTranspose(3,(3,3),strides=(2,2),padding="same",activation="sigmoid")(x)

    return tf.keras.Model(inputs=input,outputs=x,name=name)

def discriminator(name="discriminator"):
    """
    receive in input a visual representation of an ecg, with shape = (SEQ_LEN,SEQ_LEN,3)
    and a single scalar x in [0,1] s.t.
    -> x = 1 if the sample comes from the real data distribution
    -> x = 0 if the sample is generated by the generator
    """
    input = tf.keras.layers.Input(shape=(SEQ_LEN,SEQ_LEN,3))

    x = tf.keras.layers.Conv2D(4,(3,3),strides=(2,2),padding="same")(input)
    x = tf.keras.layers.LeakyReLU()(x)

    x = tf.keras.layers.Conv2D(8,(3,3),strides=(2,2),padding="same")(x)
    x = tf.keras.layers.LeakyReLU()(x)

    x = tf.keras.layers.Conv2D(16,(3,3),strides=(2,2),padding="same")(x)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.LeakyReLU()(x)

    x = tf.keras.layers.Conv2D(32,(3,3),strides=(2,2),padding="same")(x)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.LeakyReLU()(x)

    x = tf.keras.layers.Conv2D(64,(3,3),strides=(2,2),padding="same")(x)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.LeakyReLU()(x)

    x = tf.keras.layers.Conv2D(128,(3,3),strides=(2,2),padding="same")(x)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.LeakyReLU()(x)

    x = tf.keras.layers.Conv2D(256,(3,3),padding="valid")(x)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.LeakyReLU()(x)

    x = tf.keras.layers.Flatten()(x)
    x = tf.keras.layers.Dense(1,activation="sigmoid")(x)

    return tf.keras.Model(inputs=input,outputs=x,name=name)



if __name__=="__main__":
    gen_enc = encoder()
    gen_enc.summary()

    gen_dec = decoder()
    gen_dec.summary()
    pass